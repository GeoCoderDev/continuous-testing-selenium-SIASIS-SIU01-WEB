name: üöÄ SIASIS Test Automation
on:
  repository_dispatch:
    types: [test-siu01-web]
permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write
  statuses: write
jobs:
  test-automation:
    name: üß™ Execute SIASIS Tests
    runs-on: ubuntu-latest
    steps:
      - name: üìÅ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: ‚òï Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: maven
      
      - name: üîß Setup Chrome Browser
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
      
      - name: üìã Parse Input Parameters
        id: params
        run: |
          echo "üîç Parsing webhook payload..."
          TAGS="${{ github.event.client_payload.tags }}"
          ENVIRONMENT="${{ github.event.client_payload.environment }}"
          REPORT_NAME="${{ github.event.client_payload.report_name }}"
          BROWSER="${{ github.event.client_payload.browser }}"
          PARALLEL="${{ github.event.client_payload.parallel }}"
          NOTIFICATION_EMAIL="${{ github.event.client_payload.notification_email }}"
          
          # Defaults
          ENVIRONMENT=${ENVIRONMENT:-"D"}
          REPORT_NAME=${REPORT_NAME:-"$(date +%Y%m%d_%H%M%S)_${ENVIRONMENT}"}
          BROWSER=${BROWSER:-"chrome"}
          PARALLEL=${PARALLEL:-"false"}
          
          if [ "$ENVIRONMENT" = "D" ]; then
            ENV_NAME="dev"
            ENV_DISPLAY="üõ†Ô∏è DESARROLLO"
          elif [ "$ENVIRONMENT" = "C" ]; then
            ENV_NAME="cert"
            ENV_DISPLAY="üéØ CERTIFICACI√ìN"
          else
            ENV_NAME="dev"
            ENV_DISPLAY="üõ†Ô∏è DESARROLLO (default)"
            ENVIRONMENT="D"
          fi
          
          if [ -z "$TAGS" ]; then
            echo "‚ÑπÔ∏è No tags provided, running all tests..."
            TAGS="@all"
          fi
          
          # Generate execution ID and timestamp
          EXECUTION_ID="SIASIS_$(date +%Y%m%d_%H%M%S)_${ENVIRONMENT}"
          EXECUTION_TIMESTAMP="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "env_display=$ENV_DISPLAY" >> $GITHUB_OUTPUT
          echo "report_name=$REPORT_NAME" >> $GITHUB_OUTPUT
          echo "browser=$BROWSER" >> $GITHUB_OUTPUT
          echo "parallel=$PARALLEL" >> $GITHUB_OUTPUT
          echo "notification_email=$NOTIFICATION_EMAIL" >> $GITHUB_OUTPUT
          echo "execution_id=$EXECUTION_ID" >> $GITHUB_OUTPUT
          echo "execution_timestamp=$EXECUTION_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "job_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
      
      - name: üìß Send Test Execution Start Notification
        if: steps.params.outputs.notification_email != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.TESTING_INFORMATOR_EMAIL }}
          password: ${{ secrets.TESTING_INFORMATOR_PASSWORD_APPLICATION_EMAIL }}
          subject: "üöÄ [SIASIS] Ejecuci√≥n de Tests Iniciada - ${{ steps.params.outputs.env_display }}"
          to: ${{ steps.params.outputs.notification_email }}
          from: SIASIS Test Automation <${{ secrets.TESTING_INFORMATOR_EMAIL }}>
          html_body: |
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <style>
                    body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; background-color: #f5f5f5; }
                    .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; }
                    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
                    .header h1 { margin: 0; font-size: 24px; }
                    .content { padding: 30px; }
                    .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }
                    .info-item { background: #f8f9ff; padding: 15px; border-radius: 8px; border-left: 4px solid #667eea; }
                    .info-label { font-weight: bold; color: #667eea; font-size: 12px; text-transform: uppercase; margin-bottom: 5px; }
                    .info-value { color: #333; font-size: 14px; }
                    .status-badge { display: inline-block; padding: 8px 16px; background: #28a745; color: white; border-radius: 20px; font-size: 12px; font-weight: bold; }
                    .footer { background: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }
                    .button { display: inline-block; padding: 12px 24px; background: #667eea; color: white; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 10px 5px; }
                    .grid-full { grid-column: 1 / -1; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üöÄ SIASIS Test Automation</h1>
                        <div class="status-badge">‚úÖ EJECUCI√ìN INICIADA</div>
                    </div>
                    
                    <div class="content">
                        <h2>üìã Detalles de la Ejecuci√≥n</h2>
                        <p>Se ha iniciado una nueva ejecuci√≥n de tests automatizados para el Sistema de Asistencia SIASIS.</p>
                        
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-label">üåç Entorno</div>
                                <div class="info-value">${{ steps.params.outputs.env_display }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">üè∑Ô∏è Tags/Scenarios</div>
                                <div class="info-value">${{ steps.params.outputs.tags }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">üåê Navegador</div>
                                <div class="info-value">${{ steps.params.outputs.browser }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">‚ö° Ejecuci√≥n Paralela</div>
                                <div class="info-value">${{ steps.params.outputs.parallel }}</div>
                            </div>
                            <div class="info-item grid-full">
                                <div class="info-label">üÜî ID de Ejecuci√≥n</div>
                                <div class="info-value">${{ steps.params.outputs.execution_id }}</div>
                            </div>
                            <div class="info-item grid-full">
                                <div class="info-label">üïê Hora de Inicio</div>
                                <div class="info-value">${{ steps.params.outputs.execution_timestamp }}</div>
                            </div>
                        </div>
                        
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="${{ steps.params.outputs.job_url }}" class="button">üëÄ Ver Ejecuci√≥n en Tiempo Real</a>
                        </div>
                        
                        <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; border-left: 4px solid #2196f3;">
                            <strong>‚ÑπÔ∏è Informaci√≥n:</strong> Recibir√°s otra notificaci√≥n cuando la ejecuci√≥n termine con los resultados finales y enlaces a los reportes.
                        </div>
                    </div>
                    
                    <div class="footer">
                        <p>ü§ñ Generado autom√°ticamente por SIASIS Test Automation</p>
                        <p>üìã GitHub Actions Run ID: ${{ github.run_id }} | üë§ Ejecutado por: ${{ github.actor }}</p>
                    </div>
                </div>
            </body>
            </html>
      
      - name: üîê Setup Environment Variables
        run: |
          echo "ENTORNO=${{ steps.params.outputs.environment }}" >> $GITHUB_ENV
          echo "BROWSER=${{ steps.params.outputs.browser }}" >> $GITHUB_ENV
          echo "CI_HEADLESS_MODE=true" >> $GITHUB_ENV
          if [ "${{ steps.params.outputs.environment }}" = "D" ]; then
            echo "DIRECTIVO_USERNAME_DEV=${{ secrets.DIRECTIVO_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "DIRECTIVO_PASSWORD_DEV=${{ secrets.DIRECTIVO_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "AUXILIAR_USERNAME_DEV=${{ secrets.AUXILIAR_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "AUXILIAR_PASSWORD_DEV=${{ secrets.AUXILIAR_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_USERNAME_DEV=${{ secrets.PROFESOR_PRIMARIA_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_PASSWORD_DEV=${{ secrets.PROFESOR_PRIMARIA_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_USERNAME_DEV=${{ secrets.PROFESOR_SECUNDARIA_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_PASSWORD_DEV=${{ secrets.PROFESOR_SECUNDARIA_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_USERNAME_DEV=${{ secrets.TUTOR_SECUNDARIA_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_PASSWORD_DEV=${{ secrets.TUTOR_SECUNDARIA_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_USERNAME_DEV=${{ secrets.PERSONAL_ADMINISTRATIVO_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_PASSWORD_DEV=${{ secrets.PERSONAL_ADMINISTRATIVO_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "RESPONSABLE_USERNAME_DEV=${{ secrets.RESPONSABLE_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "RESPONSABLE_PASSWORD_DEV=${{ secrets.RESPONSABLE_PASSWORD_DEV }}" >> $GITHUB_ENV
          else
            echo "DIRECTIVO_USERNAME_CERT=${{ secrets.DIRECTIVO_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "DIRECTIVO_PASSWORD_CERT=${{ secrets.DIRECTIVO_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "AUXILIAR_USERNAME_CERT=${{ secrets.AUXILIAR_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "AUXILIAR_PASSWORD_CERT=${{ secrets.AUXILIAR_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_USERNAME_CERT=${{ secrets.PROFESOR_PRIMARIA_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_PASSWORD_CERT=${{ secrets.PROFESOR_PRIMARIA_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_USERNAME_CERT=${{ secrets.PROFESOR_SECUNDARIA_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_PASSWORD_CERT=${{ secrets.PROFESOR_SECUNDARIA_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_USERNAME_CERT=${{ secrets.TUTOR_SECUNDARIA_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_PASSWORD_CERT=${{ secrets.TUTOR_SECUNDARIA_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_USERNAME_CERT=${{ secrets.PERSONAL_ADMINISTRATIVO_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_PASSWORD_CERT=${{ secrets.PERSONAL_ADMINISTRATIVO_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "RESPONSABLE_USERNAME_CERT=${{ secrets.RESPONSABLE_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "RESPONSABLE_PASSWORD_CERT=${{ secrets.RESPONSABLE_PASSWORD_CERT }}" >> $GITHUB_ENV
          fi
      
      - name: üß™ Execute Tests
        id: tests
        run: |
          cat > .env << EOF
          ENTORNO="${{ steps.params.outputs.environment }}"
          EOF
          set +e
          if [ -z "${{ steps.params.outputs.tags }}" ] || [ "${{ steps.params.outputs.tags }}" = "@all" ]; then
            echo "‚ñ∂Ô∏è No tags provided, running all tests..."
            mvn clean verify -B
          else
            echo "‚ñ∂Ô∏è Running tests with tags: ${{ steps.params.outputs.tags }}"
            mvn clean verify -Dcucumber.filter.tags="${{ steps.params.outputs.tags }}" -B
          fi
          TEST_EXIT_CODE=$?
          set -e
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "execution_end_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          if [ -d "reports/${{ steps.params.outputs.env_name }}" ]; then
            echo "reports_generated=true" >> $GITHUB_OUTPUT
          else
            echo "reports_generated=false" >> $GITHUB_OUTPUT
          fi

      - name: üîç Quick Debug - Check test execution
        if: always()
        run: |
          echo "=== üîç DEBUGGING R√ÅPIDO ==="
          echo "¬øSe ejecutaron los tests?"
          
          echo "üìÅ ¬øExiste target/?"
          ls -la target/ 2>/dev/null || echo "‚ùå NO existe target/"
          
          echo "üìÅ ¬øExiste surefire-reports/?"
          ls -la target/surefire-reports/ 2>/dev/null || echo "‚ùå NO existe target/surefire-reports/"
          
          echo "üìÑ ¬øHay archivos XML?"
          find . -name "*.xml" -path "*/target/*" 2>/dev/null || echo "‚ùå NO hay archivos XML en target"
          
          echo "üß™ ¬øSe ejecut√≥ mvn correctamente?"
          echo "Exit code del paso anterior: ${{ steps.tests.outputs.test_exit_code }}"
          
          echo "üìã Contenido completo de target:"
          find target/ -type f 2>/dev/null | head -10 || echo "‚ùå target/ vac√≠o o no existe"

      - name: üîí Create Secure Metadata
        if: always()
        run: |
          mkdir -p reports/${{ steps.params.outputs.env_name }}
          cat > reports/${{ steps.params.outputs.env_name }}/test-metadata.txt << EOF
          # SIASIS Test Execution Metadata (GitHub Actions)

            Entorno: ${{ steps.params.outputs.env_name }}
            Tags ejecutados: ${{ steps.params.outputs.tags }}
            Browser usado: ${{ steps.params.outputs.browser }}
            Ejecuci√≥n paralela: ${{ steps.params.outputs.parallel }}
            Nombre del reporte: ${{ steps.params.outputs.report_name }}
            
            Repository: ${{ github.repository }}
            Run ID: ${{ github.run_id }}
            Actor: ${{ github.actor }}
            
            Exit Code: ${{ steps.tests.outputs.test_exit_code }}
            Reports Generated: ${{ steps.tests.outputs.reports_generated }}
            
            üîê Created by SIASIS Test Automation
          EOF
      
      - name: üìä Upload Test Reports (Backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ steps.params.outputs.report_name }}
          path: |
            target/cucumber-reports/
            target/surefire-reports/
            reports/
            index.html
          retention-days: 30
      
      - name: üìà Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: üß™ Tests Results (${{ steps.params.outputs.env_display }})
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
      
      - name: üöÄ Commit and Push Reports to test-results Branch
        if: steps.tests.outputs.reports_generated == 'true'
        run: |
          echo "üöÄ Preparando commit de reportes a la rama test-results..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - SIASIS Tests"
          echo "üì¶ Guardando reports/${{ steps.params.outputs.env_name }} e index.html..."
          mkdir -p $RUNNER_TEMP/reports/${{ steps.params.outputs.env_name }}
          cp -r reports/${{ steps.params.outputs.env_name }} $RUNNER_TEMP/reports/
          cp index.html $RUNNER_TEMP/
          echo "üóëÔ∏è Limpiando directorio para permitir checkout..."
          rm -f index.html || true
          rm -rf reports || true
          git fetch origin || true
          if git ls-remote --exit-code --heads origin test-results > /dev/null 2>&1; then
            echo "‚úÖ Rama test-results existe, haciendo checkout..."
            git checkout test-results
            git pull origin test-results
          else
            echo "üÜï Creando nueva rama test-results..."
            git checkout --orphan test-results
            git rm -rf . --quiet || true
            git commit --allow-empty -m "üÜï Inicializar rama test-results"
          fi
          echo "üì• Restaurando files desde $RUNNER_TEMP..."
          if [ "${{ steps.params.outputs.env_name }}" = "dev" ]; then
            rm -rf reports/dev
            mkdir -p reports
            cp -r $RUNNER_TEMP/reports/dev reports/
            cp $RUNNER_TEMP/index.html ./
          elif [ "${{ steps.params.outputs.env_name }}" = "cert" ]; then
            rm -rf reports/cert
            mkdir -p reports
            cp -r $RUNNER_TEMP/reports/cert reports/
            cp $RUNNER_TEMP/index.html ./
          fi
          git add reports/
          git add index.html
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No hay cambios para commitear."
          else
            COMMIT_MSG="üìä Auto-update test reports - ${{ steps.params.outputs.env_display }}
            
            üè∑Ô∏è Tags: ${{ steps.params.outputs.tags }}
            üéØ Environment: ${{ steps.params.outputs.env_name }}
            üìù Report: ${{ steps.params.outputs.report_name }}
            üåê Browser: ${{ steps.params.outputs.browser }}
            ‚ö° Parallel: ${{ steps.params.outputs.parallel }}
            
            ü§ñ Generated by GitHub Actions
            üìã Run: ${{ github.run_id }}
            üë§ Triggered by: ${{ github.actor }}
            üïê Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            ${{ steps.tests.outputs.test_exit_code == '0' && '‚úÖ Tests: PASSED' || '‚ùå Tests: FAILED' }}"
            git commit -m "$COMMIT_MSG"
            echo "üöÄ Pushing reportes a la rama test-results..."
            git push origin test-results
            echo "‚úÖ Reportes pusheados exitosamente a test-results."
            echo "üåê GitHub Pages actualizado en minutos."
          fi
      
      - name: üìß Send Test Execution Completion Notification
        if: always() && steps.params.outputs.notification_email != ''
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.TESTING_INFORMATOR_EMAIL }}
          password: ${{ secrets.TESTING_INFORMATOR_PASSWORD_APPLICATION_EMAIL }}
          subject: "${{ steps.tests.outputs.test_exit_code == '0' && '‚úÖ [SIASIS] Tests Ejecutados EXITOSAMENTE' || '‚ùå [SIASIS] Tests FALLARON' }} - ${{ steps.params.outputs.env_display }}"
          to: ${{ steps.params.outputs.notification_email }}
          from: SIASIS Test Automation <${{ secrets.TESTING_INFORMATOR_EMAIL }}>
          html_body: |
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <style>
                    body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; background-color: #f5f5f5; }
                    .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden; }
                    .header { background: linear-gradient(135deg, ${{ steps.tests.outputs.test_exit_code == '0' && '#28a745, #20c997' || '#dc3545, #fd7e14' }}); color: white; padding: 30px; text-align: center; }
                    .header h1 { margin: 0; font-size: 24px; }
                    .content { padding: 30px; }
                    .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }
                    .info-item { background: #f8f9ff; padding: 15px; border-radius: 8px; border-left: 4px solid ${{ steps.tests.outputs.test_exit_code == '0' && '#28a745' || '#dc3545' }}; }
                    .info-label { font-weight: bold; color: ${{ steps.tests.outputs.test_exit_code == '0' && '#28a745' || '#dc3545' }}; font-size: 12px; text-transform: uppercase; margin-bottom: 5px; }
                    .info-value { color: #333; font-size: 14px; }
                    .status-badge { display: inline-block; padding: 8px 16px; background: ${{ steps.tests.outputs.test_exit_code == '0' && '#28a745' || '#dc3545' }}; color: white; border-radius: 20px; font-size: 12px; font-weight: bold; }
                    .footer { background: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }
                    .button { display: inline-block; padding: 12px 24px; background: ${{ steps.tests.outputs.test_exit_code == '0' && '#28a745' || '#dc3545' }}; color: white; text-decoration: none; border-radius: 6px; font-weight: bold; margin: 10px 5px; }
                    .grid-full { grid-column: 1 / -1; }
                    .reports-section { background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745; }
                    .warning-section { background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>${{ steps.tests.outputs.test_exit_code == '0' && '‚úÖ' || '‚ùå' }} SIASIS Test Automation</h1>
                        <div class="status-badge">${{ steps.tests.outputs.test_exit_code == '0' && '‚úÖ TESTS EXITOSOS' || '‚ùå TESTS FALLARON' }}</div>
                    </div>
                    
                    <div class="content">
                        <h2>üìã Resumen de la Ejecuci√≥n</h2>
                        <p>${{ steps.tests.outputs.test_exit_code == '0' && '¬°Excelente! Todos los tests se ejecutaron correctamente sin errores.' || 'Se detectaron errores durante la ejecuci√≥n de los tests. Revisa los reportes para m√°s detalles.' }}</p>
                        
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-label">üåç Entorno</div>
                                <div class="info-value">${{ steps.params.outputs.env_display }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">üè∑Ô∏è Tags/Scenarios</div>
                                <div class="info-value">${{ steps.params.outputs.tags }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">üåê Navegador</div>
                                <div class="info-value">${{ steps.params.outputs.browser }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">‚ö° Ejecuci√≥n Paralela</div>
                                <div class="info-value">${{ steps.params.outputs.parallel }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">üïê Hora de Inicio</div>
                                <div class="info-value">${{ steps.params.outputs.execution_timestamp }}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">üèÅ Hora de Finalizaci√≥n</div>
                                <div class="info-value">${{ steps.tests.outputs.execution_end_time }}</div>
                            </div>
                            <div class="info-item grid-full">
                                <div class="info-label">üÜî ID de Ejecuci√≥n</div>
                                <div class="info-value">${{ steps.params.outputs.execution_id }}</div>
                            </div>
                        </div>
                        
                        ${{ steps.tests.outputs.reports_generated == 'true' && format('<div class="reports-section"><h3>üìä Reportes Disponibles</h3><p>Los reportes de testing han sido generados y estar√°n disponibles en aproximadamente <strong>2-3 minutos</strong> en GitHub Pages:</p><div style="text-align: center;"><a href="https://geocoderdev.github.io/continuous-testing-selenium-SIASIS-SIU01-WEB/" class="button">üåê Ver Dashboard Principal</a><a href="https://geocoderdev.github.io/continuous-testing-selenium-SIASIS-SIU01-WEB/reports/{0}/cucumber-reports/" class="button">ü•í Reportes Cucumber</a><a href="https://geocoderdev.github.io/continuous-testing-selenium-SIASIS-SIU01-WEB/reports/{0}/surefire-reports/" class="button">üß™ Reportes Surefire</a></div><p><strong>‚è∞ Nota:</strong> Si los enlaces no funcionan inmediatamente, espera 2-3 minutos para que GitHub Pages se actualice.</p></div>', steps.params.outputs.env_name) || '<div class="warning-section"><h3>‚ö†Ô∏è Reportes No Generados</h3><p>No se pudieron generar reportes para esta ejecuci√≥n. Revisa la ejecuci√≥n en GitHub Actions para m√°s detalles.</p></div>' }}
                        
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="${{ steps.params.outputs.job_url }}" class="button">üëÄ Ver Detalles de la Ejecuci√≥n</a>
                        </div>
                        
                        <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; border-left: 4px solid #2196f3;">
                            <strong>‚ÑπÔ∏è Pr√≥ximos pasos:</strong>
                            <ul style="margin: 10px 0; padding-left: 20px;">
                                ${{ steps.tests.outputs.test_exit_code == '0' && '<li>‚úÖ Revisa los reportes para ver los detalles de los tests exitosos</li><li>üìä Analiza las m√©tricas de rendimiento en los reportes</li><li>üîÑ Los tests est√°n listos para el siguiente ciclo</li>' || '<li>‚ùå Revisa los reportes para identificar los tests que fallaron</li><li>üîç Analiza los logs de error en GitHub Actions</li><li>üõ†Ô∏è Corrige los issues identificados antes del pr√≥ximo ciclo</li>' }}
                            </ul>
                        </div>
                    </div>
                    
                    <div class="footer">
                        <p>ü§ñ Generado autom√°ticamente por SIASIS Test Automation</p>
                        <p>üìã GitHub Actions Run ID: ${{ github.run_id }} | üë§ Ejecutado por: ${{ github.actor }}</p>
                        <p>üîó Repositorio: <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a></p>
                    </div>
                </div>
            </body>
            </html>
      
      - name: üìã Test Summary
        if: always()
        run: |
          echo "## üß™ Resumen de Ejecuci√≥n de Tests" >> $GITHUB_STEP_SUMMARY
          echo "| Par√°metro | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üåç Entorno | ${{ steps.params.outputs.env_display }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üè∑Ô∏è Tags | \`${{ steps.params.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù Nombre Reporte | ${{ steps.params.outputs.report_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üåê Browser | ${{ steps.params.outputs.browser }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìß Email Notificaci√≥n | ${{ steps.params.outputs.notification_email }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.tests.outputs.test_exit_code }}" = "0" ]; then
            echo "### ‚úÖ Resultado: √âXITO" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Resultado: FALL√ì" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.tests.outputs.reports_generated }}" = "true" ]; then
            echo "### üìä Reportes Generados" >> $GITHUB_STEP_SUMMARY
            echo "- üåê [GitHub Pages Dashboard](https://geocoderdev.github.io/continuous-testing-selenium-SIASIS-SIU01-WEB/)" >> $GITHUB_STEP_SUMMARY
            echo "- ü•í [Cucumber Reports](https://geocoderdev.github.io/continuous-testing-selenium-SIASIS-SIU01-WEB/reports/${{ steps.params.outputs.env_name }}/cucumber-reports/)" >> $GITHUB_STEP_SUMMARY
            echo "- üß™ [Surefire Reports](https://geocoderdev.github.io/continuous-testing-selenium-SIASIS-SIU01-WEB/reports/${{ steps.params.outputs.env_name }}/surefire-reports/)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üöÄ Reportes actualizados en \`test-results\` y disponibles en GitHub Pages en 2-3 minutos." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå No se generaron reportes para esta ejecuci√≥n" >> $GITHUB_STEP_SUMMARY
          fi
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*üîí Ejecuci√≥n segura - Credenciales protegidas via GitHub Secrets*" >> $GITHUB_STEP_SUMMARY
          echo "*‚ö° Ejecutado el $(date -u) via webhook \`test-siu01-web\`*" >> $GITHUB_STEP_SUMMARY