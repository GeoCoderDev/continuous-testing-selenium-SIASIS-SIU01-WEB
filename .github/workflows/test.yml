name: 🚀 SIASIS Test Automation
on:
  repository_dispatch:
    types: [test-siu01-web]
permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write
  statuses: write
jobs:
  test-automation:
    name: 🧪 Execute SIASIS Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          cache: maven
      - name: 🔧 Setup Chrome Browser
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
      - name: 📋 Parse Input Parameters
        id: params
        run: |
          echo "🔍 Parsing webhook payload..."
          TAGS="${{ github.event.client_payload.tags }}"
          ENVIRONMENT="${{ github.event.client_payload.environment }}"
          REPORT_NAME="${{ github.event.client_payload.report_name }}"
          BROWSER="${{ github.event.client_payload.browser }}"
          PARALLEL="${{ github.event.client_payload.parallel }}"
          ENVIRONMENT=${ENVIRONMENT:-"D"}
          REPORT_NAME=${REPORT_NAME:-"$(date +%Y%m%d_%H%M%S)_${ENVIRONMENT}"}
          BROWSER=${BROWSER:-"chrome"}
          PARALLEL=${PARALLEL:-"false"}
          if [ "$ENVIRONMENT" = "D" ]; then
            ENV_NAME="dev"
            ENV_DISPLAY="🛠️ DESARROLLO"
          elif [ "$ENVIRONMENT" = "C" ]; then
            ENV_NAME="cert"
            ENV_DISPLAY="🎯 CERTIFICACIÓN"
          else
            ENV_NAME="dev"
            ENV_DISPLAY="🛠️ DESARROLLO (default)"
            ENVIRONMENT="D"
          fi
          if [ -z "$TAGS" ]; then
            echo "ℹ️ No tags provided, running all tests..."
            TAGS=""
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "env_display=$ENV_DISPLAY" >> $GITHUB_OUTPUT
          echo "report_name=$REPORT_NAME" >> $GITHUB_OUTPUT
          echo "browser=$BROWSER" >> $GITHUB_OUTPUT
          echo "parallel=$PARALLEL" >> $GITHUB_OUTPUT
      - name: 🔐 Setup Environment Variables
        run: |
          echo "ENTORNO=${{ steps.params.outputs.environment }}" >> $GITHUB_ENV
          echo "BROWSER=${{ steps.params.outputs.browser }}" >> $GITHUB_ENV
          echo "CI_HEADLESS_MODE=true" >> $GITHUB_ENV
          if [ "${{ steps.params.outputs.environment }}" = "D" ]; then
            echo "DIRECTIVO_USERNAME_DEV=${{ secrets.DIRECTIVO_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "DIRECTIVO_PASSWORD_DEV=${{ secrets.DIRECTIVO_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "AUXILIAR_USERNAME_DEV=${{ secrets.AUXILIAR_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "AUXILIAR_PASSWORD_DEV=${{ secrets.AUXILIAR_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_USERNAME_DEV=${{ secrets.PROFESOR_PRIMARIA_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_PASSWORD_DEV=${{ secrets.PROFESOR_PRIMARIA_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_USERNAME_DEV=${{ secrets.PROFESOR_SECUNDARIA_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_PASSWORD_DEV=${{ secrets.PROFESOR_SECUNDARIA_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_USERNAME_DEV=${{ secrets.TUTOR_SECUNDARIA_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_PASSWORD_DEV=${{ secrets.TUTOR_SECUNDARIA_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_USERNAME_DEV=${{ secrets.PERSONAL_ADMINISTRATIVO_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_PASSWORD_DEV=${{ secrets.PERSONAL_ADMINISTRATIVO_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "RESPONSABLE_USERNAME_DEV=${{ secrets.RESPONSABLE_USERNAME_DEV }}" >> $GITHUB_ENV
            echo "RESPONSABLE_PASSWORD_DEV=${{ secrets.RESPONSABLE_PASSWORD_DEV }}" >> $GITHUB_ENV
          else
            echo "DIRECTIVO_USERNAME_CERT=${{ secrets.DIRECTIVO_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "DIRECTIVO_PASSWORD_CERT=${{ secrets.DIRECTIVO_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "AUXILIAR_USERNAME_CERT=${{ secrets.AUXILIAR_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "AUXILIAR_PASSWORD_CERT=${{ secrets.AUXILIAR_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_USERNAME_CERT=${{ secrets.PROFESOR_PRIMARIA_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_PRIMARIA_PASSWORD_CERT=${{ secrets.PROFESOR_PRIMARIA_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_USERNAME_CERT=${{ secrets.PROFESOR_SECUNDARIA_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "PROFESOR_SECUNDARIA_PASSWORD_CERT=${{ secrets.PROFESOR_SECUNDARIA_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_USERNAME_CERT=${{ secrets.TUTOR_SECUNDARIA_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "TUTOR_SECUNDARIA_PASSWORD_CERT=${{ secrets.TUTOR_SECUNDARIA_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_USERNAME_CERT=${{ secrets.PERSONAL_ADMINISTRATIVO_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "PERSONAL_ADMINISTRATIVO_PASSWORD_CERT=${{ secrets.PERSONAL_ADMINISTRATIVO_PASSWORD_CERT }}" >> $GITHUB_ENV
            echo "RESPONSABLE_USERNAME_CERT=${{ secrets.RESPONSABLE_USERNAME_CERT }}" >> $GITHUB_ENV
            echo "RESPONSABLE_PASSWORD_CERT=${{ secrets.RESPONSABLE_PASSWORD_CERT }}" >> $GITHUB_ENV
          fi
      - name: 🧪 Execute Tests
        id: tests
        run: |
          cat > .env << EOF
          ENTORNO="${{ steps.params.outputs.environment }}"
          EOF
          set +e
          if [ -z "${{ steps.params.outputs.tags }}" ]; then
            echo "▶️ No tags provided, running all tests..."
            mvn clean verify -B
          else
            echo "▶️ Running tests with tags: ${{ steps.params.outputs.tags }}"
            mvn clean verify -Dcucumber.filter.tags="${{ steps.params.outputs.tags }}" -B
          fi
          TEST_EXIT_CODE=$?
          set -e
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          if [ -d "reports/${{ steps.params.outputs.env_name }}" ]; then
            echo "reports_generated=true" >> $GITHUB_OUTPUT
          else
            echo "reports_generated=false" >> $GITHUB_OUTPUT
          fi
      - name: 🔒 Create Secure Metadata
        if: always()
        run: |
          mkdir -p reports/${{ steps.params.outputs.env_name }}
          cat > reports/${{ steps.params.outputs.env_name }}/test-metadata.txt << EOF
          # SIASIS Test Execution Metadata (GitHub Actions)

            Entorno: ${{ steps.params.outputs.env_name }}
            Tags ejecutados: ${{ steps.params.outputs.tags }}
            Browser usado: ${{ steps.params.outputs.browser }}
            Ejecución paralela: ${{ steps.params.outputs.parallel }}
            Nombre del reporte: ${{ steps.params.outputs.report_name }}
            
            Repository: ${{ github.repository }}
            Run ID: ${{ github.run_id }}
            Actor: ${{ github.actor }}
            
            Exit Code: ${{ steps.tests.outputs.test_exit_code }}
            Reports Generated: ${{ steps.tests.outputs.reports_generated }}
            
            🔐 Created by SIASIS Test Automation
          EOF
      - name: 📊 Upload Test Reports (Backup)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ steps.params.outputs.report_name }}
          path: |
            target/cucumber-reports/
            target/surefire-reports/
            reports/
            index.html
          retention-days: 30
      - name: 📈 Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 🧪 Tests Results (${{ steps.params.outputs.env_display }})
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
      - name: 🚀 Commit and Push Reports to test-results Branch
        if: steps.tests.outputs.reports_generated == 'true'
        run: |
          echo "🚀 Preparando commit de reportes a la rama test-results..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - SIASIS Tests"
          echo "📦 Guardando reports/${{ steps.params.outputs.env_name }} e index.html..."
          mkdir -p $RUNNER_TEMP/reports/${{ steps.params.outputs.env_name }}
          cp -r reports/${{ steps.params.outputs.env_name }} $RUNNER_TEMP/reports/
          cp index.html $RUNNER_TEMP/
          echo "🗑️ Limpiando directorio para permitir checkout..."
          rm -f index.html || true
          rm -rf reports || true
          git fetch origin || true
          if git ls-remote --exit-code --heads origin test-results > /dev/null 2>&1; then
            echo "✅ Rama test-results existe, haciendo checkout..."
            git checkout test-results
            git pull origin test-results
          else
            echo "🆕 Creando nueva rama test-results..."
            git checkout --orphan test-results
            git rm -rf . --quiet || true
            git commit --allow-empty -m "🆕 Inicializar rama test-results"
          fi
          echo "📥 Restaurando files desde $RUNNER_TEMP..."
          if [ "${{ steps.params.outputs.env_name }}" = "dev" ]; then
            rm -rf reports/dev
            mkdir -p reports
            cp -r $RUNNER_TEMP/reports/dev reports/
            cp $RUNNER_TEMP/index.html ./
          elif [ "${{ steps.params.outputs.env_name }}" = "cert" ]; then
            rm -rf reports/cert
            mkdir -p reports
            cp -r $RUNNER_TEMP/reports/cert reports/
            cp $RUNNER_TEMP/index.html ./
          fi
          git add reports/
          git add index.html
          if git diff --staged --quiet; then
            echo "⚠️ No hay cambios para commitear."
          else
            COMMIT_MSG="📊 Auto-update test reports - ${{ steps.params.outputs.env_display }}
            
            🏷️ Tags: ${{ steps.params.outputs.tags }}
            🎯 Environment: ${{ steps.params.outputs.env_name }}
            📝 Report: ${{ steps.params.outputs.report_name }}
            🌐 Browser: ${{ steps.params.outputs.browser }}
            ⚡ Parallel: ${{ steps.params.outputs.parallel }}
            
            🤖 Generated by GitHub Actions
            📋 Run: ${{ github.run_id }}
            👤 Triggered by: ${{ github.actor }}
            🕐 Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            ${{ steps.tests.outputs.test_exit_code == '0' && '✅ Tests: PASSED' || '❌ Tests: FAILED' }}"
            git commit -m "$COMMIT_MSG"
            echo "🚀 Pushing reportes a la rama test-results..."
            git push origin test-results
            echo "✅ Reportes pusheados exitosamente a test-results."
            echo "🌐 GitHub Pages actualizado en minutos."
          fi
      - name: 📋 Test Summary
        if: always()
        run: |
          echo "## 🧪 Resumen de Ejecución de Tests" >> $GITHUB_STEP_SUMMARY
          echo "| Parámetro | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 Entorno | ${{ steps.params.outputs.env_display }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Tags | \`${{ steps.params.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Nombre Reporte | ${{ steps.params.outputs.report_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 Browser | ${{ steps.params.outputs.browser }} |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.tests.outputs.test_exit_code }}" = "0" ]; then
            echo "### ✅ Resultado: ÉXITO" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Resultado: FALLÓ" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.tests.outputs.reports_generated }}" = "true" ]; then
            echo "### 📊 Reportes Generados" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 [GitHub Pages Dashboard](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)" >> $GITHUB_STEP_SUMMARY
            echo "- 🥒 [Cucumber Reports](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ steps.params.outputs.env_name }}/cucumber-reports/)" >> $GITHUB_STEP_SUMMARY
            echo "- 🧪 [Surefire Reports](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ steps.params.outputs.env_name }}/surefire-reports/)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 Reportes actualizados en \`test-results\` y disponibles en GitHub Pages en minutos." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No se generaron reportes para esta ejecución" >> $GITHUB_STEP_SUMMARY
          fi
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*🔒 Ejecución segura - Credenciales protegidas via GitHub Secrets*" >> $GITHUB_STEP_SUMMARY
          echo "*⚡ Ejecutado el $(date -u) via webhook \`test-siu01-web\`*" >> $GITHUB_STEP_SUMMARY
